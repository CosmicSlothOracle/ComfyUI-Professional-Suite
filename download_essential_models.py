#!/usr/bin/env python3
"""
AUTOMATIC MODEL DOWNLOADER - ULTIMATE ANIME PIPELINE
===================================================

L√§dt automatisch alle essentiellen Modelle f√ºr die Anime Video Generation herunter.
Basierend auf umfassender Internet-Recherche und bew√§hrten Technologien.
"""

import os
import sys
import requests
import hashlib
import logging
from pathlib import Path
from typing import Dict, List, Optional
from urllib.parse import urlparse
import time

# Setup logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class EssentialModelDownloader:
    """
    Automatischer Download aller essentiellen Modelle
    """

    def __init__(self):
        self.models_dir = Path("models")
        self.download_timeout = 300  # 5 Minuten pro Datei

        # Essentielle Modelle (Research-basiert)
        self.essential_models = {
            "motion_modules": {
                "target_dir": "animatediff_models",
                "models": {
                    "v3_sd15_mm.ckpt": {
                        "url": "https://huggingface.co/guoyww/animatediff/resolve/main/v3_sd15_mm.ckpt",
                        "size_mb": 837,
                        "priority": 1,
                        "description": "AnimateDiff V3 Motion Module - Neueste Version"
                    },
                    "mm_sd_v15_v2.ckpt": {
                        "url": "https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v15_v2.ckpt",
                        "size_mb": 909,
                        "priority": 2,
                        "description": "AnimateDiff V2 Motion Module - Bew√§hrt stabil"
                    }
                }
            },
            "checkpoints": {
                "target_dir": "checkpoints",
                "models": {
                    "counterfeitV30_v30.safetensors": {
                        "url": "https://civitai.com/api/download/models/57618",
                        "size_mb": 2000,
                        "priority": 1,
                        "description": "CounterfeitV3.0 - Hochwertige Anime-Generierung"
                    }
                }
            },
            "controlnet": {
                "target_dir": "controlnet",
                "models": {
                    "control_v11p_sd15_openpose.pth": {
                        "url": "https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11p_sd15_openpose.pth",
                        "size_mb": 1400,
                        "priority": 1,
                        "description": "OpenPose ControlNet f√ºr Pose-Kontrolle"
                    }
                }
            },
            "vae": {
                "target_dir": "vae",
                "models": {
                    "vae-ft-mse-840000-ema-pruned.safetensors": {
                        "url": "https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors",
                        "size_mb": 335,
                        "priority": 1,
                        "description": "Standard VAE f√ºr bessere Farben"
                    }
                }
            }
        }

    def create_directories(self):
        """
        Erstellt alle erforderlichen Verzeichnisse
        """
        for category, config in self.essential_models.items():
            target_dir = self.models_dir / config["target_dir"]
            target_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ Verzeichnis erstellt: {target_dir}")

    def download_file(self, url: str, target_path: Path, expected_size_mb: int = None) -> bool:
        """
        L√§dt eine einzelne Datei herunter
        """
        if target_path.exists():
            logger.info(
                f"‚è≠Ô∏è  {target_path.name} bereits vorhanden, √ºberspringe...")
            return True

        logger.info(f"üì• Lade herunter: {target_path.name}")
        logger.info(f"üîó URL: {url}")

        try:
            response = requests.get(
                url, stream=True, timeout=self.download_timeout)
            response.raise_for_status()

            total_size = int(response.headers.get('content-length', 0))
            downloaded_size = 0

            with open(target_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)

                        # Progress anzeigen
                        if total_size > 0:
                            progress = (downloaded_size / total_size) * 100
                            if downloaded_size % (1024 * 1024 * 10) == 0:  # Alle 10MB
                                logger.info(
                                    f"üìä Progress: {progress:.1f}% ({downloaded_size // (1024*1024)}MB / {total_size // (1024*1024)}MB)")

            # Dateigr√∂√üe √ºberpr√ºfen
            actual_size_mb = target_path.stat().st_size / (1024 * 1024)
            logger.info(
                f"‚úÖ Download abgeschlossen: {target_path.name} ({actual_size_mb:.1f}MB)")

            if expected_size_mb and abs(actual_size_mb - expected_size_mb) > 50:
                logger.warning(
                    f"‚ö†Ô∏è  Unerwartete Dateigr√∂√üe: {actual_size_mb:.1f}MB (erwartet: {expected_size_mb}MB)")

            return True

        except Exception as e:
            logger.error(
                f"‚ùå Download fehlgeschlagen f√ºr {target_path.name}: {e}")
            if target_path.exists():
                target_path.unlink()  # Defekte Datei l√∂schen
            return False

    def download_all_models(self):
        """
        L√§dt alle essentiellen Modelle herunter
        """
        logger.info("üöÄ STARTE DOWNLOAD ALLER ESSENTIELLEN MODELLE")

        # Verzeichnisse erstellen
        self.create_directories()

        total_models = sum(len(config["models"])
                           for config in self.essential_models.values())
        downloaded_count = 0
        failed_downloads = []

        # Nach Priorit√§t sortiert herunterladen
        for category, config in self.essential_models.items():
            logger.info(f"\nüìÇ KATEGORIE: {category.upper()}")
            target_base_dir = self.models_dir / config["target_dir"]

            # Modelle nach Priorit√§t sortieren
            sorted_models = sorted(
                config["models"].items(),
                key=lambda x: x[1].get("priority", 999)
            )

            for model_name, model_config in sorted_models:
                target_path = target_base_dir / model_name

                logger.info(f"\nüéØ {model_config['description']}")
                success = self.download_file(
                    model_config["url"],
                    target_path,
                    model_config.get("size_mb")
                )

                if success:
                    downloaded_count += 1
                else:
                    failed_downloads.append((category, model_name))

                # Kurze Pause zwischen Downloads
                time.sleep(2)

        # Zusammenfassung
        logger.info(f"\nüéØ DOWNLOAD ZUSAMMENFASSUNG:")
        logger.info(f"‚úÖ Erfolgreich: {downloaded_count}/{total_models}")
        logger.info(f"‚ùå Fehlgeschlagen: {len(failed_downloads)}")

        if failed_downloads:
            logger.warning(f"\n‚ö†Ô∏è  FEHLGESCHLAGENE DOWNLOADS:")
            for category, model_name in failed_downloads:
                logger.warning(f"   - {category}: {model_name}")

        if downloaded_count == total_models:
            logger.info(f"\nüéâ ALLE MODELLE ERFOLGREICH HERUNTERGELADEN!")
            logger.info(
                f"üìÅ Modelle gespeichert in: {self.models_dir.absolute()}")
            return True
        else:
            logger.warning(f"\n‚ö†Ô∏è  EINIGE DOWNLOADS FEHLGESCHLAGEN")
            logger.info(
                f"üí° Versuche fehlgeschlagene Downloads manuell oder mit besserer Internetverbindung")
            return False

    def verify_installation(self):
        """
        √úberpr√ºft die Installation aller Modelle
        """
        logger.info("\nüîç √úBERPR√úFE INSTALLATION...")

        missing_models = []
        total_size_gb = 0

        for category, config in self.essential_models.items():
            target_base_dir = self.models_dir / config["target_dir"]

            for model_name, model_config in config["models"].items():
                target_path = target_base_dir / model_name

                if target_path.exists():
                    size_mb = target_path.stat().st_size / (1024 * 1024)
                    total_size_gb += size_mb / 1024
                    logger.info(f"‚úÖ {model_name} ({size_mb:.1f}MB)")
                else:
                    missing_models.append(f"{category}/{model_name}")
                    logger.warning(f"‚ùå {model_name} FEHLT")

        logger.info(f"\nüìä GESAMTGR√ñSSE: {total_size_gb:.2f}GB")

        if not missing_models:
            logger.info("üéâ ALLE MODELLE VOLLST√ÑNDIG INSTALLIERT!")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è  {len(missing_models)} MODELLE FEHLEN:")
            for model in missing_models:
                logger.warning(f"   - {model}")
            return False


def main():
    """
    Hauptfunktion f√ºr Model-Download
    """
    print("üéå ULTIMATE ANIME PIPELINE - MODEL DOWNLOADER")
    print("=" * 60)
    print("Automatischer Download aller essentiellen Modelle")
    print("Basierend auf umfassender Internet-Recherche")
    print("=" * 60)

    try:
        downloader = EssentialModelDownloader()

        # √úberpr√ºfe verf√ºgbaren Speicherplatz
        total_size_estimate = 6.5  # GB gesch√§tzt
        print(f"\nüìä Gesch√§tzte Download-Gr√∂√üe: ~{total_size_estimate}GB")
        print("‚è±Ô∏è  Gesch√§tzte Zeit: 20-60 Minuten (abh√§ngig von Internetverbindung)")

        # Starte Download
        success = downloader.download_all_models()

        # √úberpr√ºfe Installation
        verification_success = downloader.verify_installation()

        if success and verification_success:
            print("\nüéØ MODEL DOWNLOAD ERFOLGREICH ABGESCHLOSSEN!")
            print("\nüìã N√ÑCHSTE SCHRITTE:")
            print("   1. ComfyUI neu starten")
            print("   2. Workflow-Templates testen")
            print("   3. Erste Anime-Videos generieren!")
            return True
        else:
            print("\n‚ö†Ô∏è  DOWNLOAD UNVOLLST√ÑNDIG")
            print("üí° √úberpr√ºfe Internetverbindung und versuche erneut")
            return False

    except Exception as e:
        logger.error(f"‚ùå Kritischer Fehler: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
