#!/usr/bin/env python3\n\"\"\"\nPixel Art Batch Execution Script\nRuns all 249 workflows via ComfyUI API\n\"\"\"\n\nimport json\nimport requests\nimport time\nimport os\nfrom pathlib import Path\nimport uuid\n\nclass PixelArtBatchExecutor:\n    def __init__(self):\n        self.base_url = \"http://127.0.0.1:8188\"\n        self.workflow_dir = Path(\"output/pixel_art_videos\")\n        self.output_dir = Path(\"output/pixel_art_results\")\n        self.output_dir.mkdir(exist_ok=True)\n        \n    def wait_for_comfyui(self, max_wait=60):\n        \"\"\"Wait for ComfyUI to be ready\"\"\"\n        print(\"🔄 Waiting for ComfyUI to start...\")\n        start_time = time.time()\n        \n        while time.time() - start_time < max_wait:\n            try:\n                response = requests.get(f\"{self.base_url}/system_stats\")\n                if response.status_code == 200:\n                    print(\"✅ ComfyUI is ready!\")\n                    return True\n            except requests.exceptions.ConnectionError:\n                pass\n            time.sleep(2)\n        \n        print(\"❌ ComfyUI failed to start within timeout\")\n        return False\n    \n    def submit_workflow(self, workflow_data):\n        \"\"\"Submit workflow to ComfyUI\"\"\"\n        try:\n            # Generate unique client_id\n            client_id = str(uuid.uuid4())\n            \n            # Submit workflow\n            response = requests.post(\n                f\"{self.base_url}/prompt\",\n                json={\n                    \"prompt\": workflow_data,\n                    \"client_id\": client_id\n                }\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                return result.get(\"prompt_id\"), client_id\n            else:\n                print(f\"❌ Failed to submit workflow: {response.status_code}\")\n                return None, None\n                \n        except Exception as e:\n            print(f\"❌ Error submitting workflow: {e}\")\n            return None, None\n    \n    def check_workflow_status(self, prompt_id):\n        \"\"\"Check if workflow is complete\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/history/{prompt_id}\")\n            if response.status_code == 200:\n                history = response.json()\n                if prompt_id in history:\n                    return \"completed\"\n            \n            # Check queue\n            response = requests.get(f\"{self.base_url}/queue\")\n            if response.status_code == 200:\n                queue_data = response.json()\n                \n                # Check if in running queue\n                for item in queue_data.get(\"queue_running\", []):\n                    if item[1] == prompt_id:\n                        return \"running\"\n                \n                # Check if in pending queue\n                for item in queue_data.get(\"queue_pending\", []):\n                    if item[1] == prompt_id:\n                        return \"pending\"\n            \n            return \"unknown\"\n            \n        except Exception as e:\n            print(f\"❌ Error checking status: {e}\")\n            return \"error\"\n    \n    def run_single_workflow(self, workflow_file):\n        \"\"\"Run a single workflow file\"\"\"\n        print(f\"\\n🎨 Processing: {workflow_file.name}\")\n        \n        try:\n            # Load workflow\n            with open(workflow_file, 'r') as f:\n                workflow_data = json.load(f)\n            \n            # Submit workflow\n            prompt_id, client_id = self.submit_workflow(workflow_data)\n            if not prompt_id:\n                return False\n            \n            print(f\"   📤 Submitted (ID: {prompt_id[:8]}...)\")\n            \n            # Wait for completion\n            max_wait = 300  # 5 minutes per workflow\n            start_time = time.time()\n            \n            while time.time() - start_time < max_wait:\n                status = self.check_workflow_status(prompt_id)\n                \n                if status == \"completed\":\n                    print(f\"   ✅ Completed successfully\")\n                    return True\n                elif status == \"error\":\n                    print(f\"   ❌ Failed with error\")\n                    return False\n                elif status in [\"running\", \"pending\"]:\n                    print(f\"   ⏳ Status: {status}\")\n                    time.sleep(10)\n                else:\n                    time.sleep(5)\n            \n            print(f\"   ⏰ Timeout after {max_wait}s\")\n            return False\n            \n        except Exception as e:\n            print(f\"   ❌ Error: {e}\")\n            return False\n    \n    def run_batch_processing(self, max_concurrent=3):\n        \"\"\"Run all workflows with limited concurrency\"\"\"\n        print(\"🚀 STARTING PIXEL ART BATCH PROCESSING\")\n        print(\"=\" * 50)\n        \n        # Wait for ComfyUI\n        if not self.wait_for_comfyui():\n            return\n        \n        # Get all workflow files\n        workflow_files = list(self.workflow_dir.glob(\"workflow_*.json\"))\n        total_files = len(workflow_files)\n        \n        print(f\"📊 Found {total_files} workflows to process\")\n        print(f\"🔧 Max concurrent: {max_concurrent}\")\n        \n        # Process workflows\n        successful = 0\n        failed = 0\n        \n        for i, workflow_file in enumerate(workflow_files, 1):\n            print(f\"\\n[{i}/{total_files}] Processing workflow...\")\n            \n            if self.run_single_workflow(workflow_file):\n                successful += 1\n            else:\n                failed += 1\n            \n            # Progress update\n            if i % 10 == 0:\n                print(f\"\\n📈 Progress: {i}/{total_files} ({i/total_files*100:.1f}%)\")\n                print(f\"   ✅ Successful: {successful}\")\n                print(f\"   ❌ Failed: {failed}\")\n        \n        # Final report\n        print(\"\\n\" + \"=\" * 50)\n        print(\"🎯 BATCH PROCESSING COMPLETE!\")\n        print(f\"✅ Successful: {successful}/{total_files} ({successful/total_files*100:.1f}%)\")\n        print(f\"❌ Failed: {failed}/{total_files} ({failed/total_files*100:.1f}%)\")\n        \n        # Save final report\n        report_file = self.output_dir / \"execution_report.txt\"\n        with open(report_file, 'w', encoding='utf-8') as f:\n            f.write(\"PIXEL ART EXECUTION REPORT\\n\")\n            f.write(\"=\" * 30 + \"\\n\\n\")\n            f.write(f\"Total workflows: {total_files}\\n\")\n            f.write(f\"Successful: {successful}\\n\")\n            f.write(f\"Failed: {failed}\\n\")\n            f.write(f\"Success rate: {successful/total_files*100:.1f}%\\n\")\n        \n        print(f\"📄 Report saved to: {report_file}\")\n\nif __name__ == \"__main__\":\n    executor = PixelArtBatchExecutor()\n    executor.run_batch_processing()
